@page "/"
@using System.Net.Http.Json
@using TestAPI.Models
@inject HttpClient Http
@rendermode InteractiveServer

<h3 class="text-center mb-3">User List</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height:200px;">
        <div class="spinner-border text-primary" role="status" style="width:3rem; height:3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div style="max-height: 400px; overflow-y: auto;">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>City</th>
                    <th>Created Date</th>
                </tr>
            </thead>
            <tbody>
                @if (pagedResult.Items == null || !pagedResult.Items.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted">No data available.</td>
                    </tr>
                }
                else
                {
                    @foreach (var user in pagedResult.Items)
                    {
                        <tr>
                            <td>@user.FullName</td>
                            <td>@user.Email</td>
                            <td>@user.City</td>
                            <td>@user.CreatedAt.ToShortDateString()</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    @if (pagedResult.TotalCount > 0)
    {
        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="GoToPreviousPage">Previous</button>
                </li>

                @foreach (var page in GetSmartPageNumbers())
                {
                    if (page is string)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                    else
                    {
                        int p = (int)page;
                        <li class="page-item @(currentPage == p ? "active" : "")">
                            <button class="page-link" @onclick="@(() => GoToPage(p))">@p</button>
                        </li>
                    }
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="GoToNextPage">Next</button>
                </li>
            </ul>
        </nav>
    }
}

@code {
    private PagedResult<Users> pagedResult = new PagedResult<Users>();
    private bool isLoading = true;
    private int currentPage = 1;
    private const int DefaultPageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)pagedResult.TotalCount / DefaultPageSize);
    private IEnumerable<Users> PagedUsers => pagedResult.Items;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers(currentPage);
    }

    private async Task LoadUsers(int pageNumber)
    {
        isLoading = true;

        try
        {
            // Call the API endpoint
            pagedResult = await Http.GetFromJsonAsync<PagedResult<Users>>(
            $"paged?pageNumber={pageNumber}&pageSize={DefaultPageSize}"
            ) ?? new PagedResult<Users>();

            currentPage = pageNumber;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            pagedResult = new PagedResult<Users>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GoToPreviousPage()
    {
        if (currentPage > 1)
            await LoadUsers(currentPage - 1);
    }

    private async Task GoToNextPage()
    {
        if (currentPage < totalPages)
            await LoadUsers(currentPage + 1);
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
            await LoadUsers(page);
    }

    private List<object> GetSmartPageNumbers()
    {
        var pages = new List<object>();

        if (totalPages <= 8)
        {
            for (int i = 1; i <= totalPages; i++)
                pages.Add(i);
            return pages;
        }

        pages.Add(1);
        pages.Add(2);

        if (currentPage > 5)
            pages.Add("...");

        int start = Math.Max(3, currentPage - 1);
        int end = Math.Min(totalPages - 2, currentPage + 1);

        for (int i = start; i <= end; i++)
            pages.Add(i);

        if (currentPage < totalPages - 4)
            pages.Add("...");

        pages.Add(totalPages - 1);
        pages.Add(totalPages);

        return pages.Distinct().OrderBy(p => p is int i ? i : int.MaxValue).ToList();
    }
}
